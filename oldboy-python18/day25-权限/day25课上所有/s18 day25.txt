s18day25

内容回顾：	
	1. ModelForm
		class UserModelForm(ModelForm):
			class Meta:
				model = models.UserInfo
				fields = "__all__"
				
		form = UserModelForm(instance=models.UserInfo.objects.get(id=1))
		
		form = UserModelForm(data=request.POST)
		form.save()
		
		form = UserModelForm(instance=models.UserInfo.objects.get(id=1),data=request.POST)
		form.save()
		
	2. 序列化
		- 内置
		- json
		
	3. 分页组件
	

今日内容：
	1. 信号
	2. 缓存
	
	

	3. 权限系统
		- 需求分析
		- 数据库设计
		- 组件
		
		
内容详细：
	1. 信号
	   需求： 数据库新增数据时，写一条日志，信号。
	   
		Model signals
			pre_init                    # django的modal执行其构造方法前，自动触发
			post_init                   # django的modal执行其构造方法后，自动触发
			pre_save                    # django的modal对象保存前，自动触发
			post_save                   # django的modal对象保存后，自动触发
			pre_delete                  # django的modal对象删除前，自动触发
			post_delete                 # django的modal对象删除后，自动触发
			m2m_changed                 # django的modal中使用m2m字段操作第三张表（add,remove,clear）前后，自动触发
			class_prepared              # 程序启动时，检测已注册的app中modal类，对于每一个类，自动触发
		Management signals
			pre_migrate                 # 执行migrate命令前，自动触发
			post_migrate                # 执行migrate命令后，自动触发
		Request/response signals
			request_started             # 请求到来前，自动触发
			request_finished            # 请求结束后，自动触发
			got_request_exception       # 请求异常后，自动触发
		Test signals
			setting_changed             # 使用test测试修改配置文件时，自动触发
			template_rendered           # 使用test测试渲染模板时，自动触发
		Database Wrappers
			connection_created          # 创建数据库连接时，自动触发
	
		
		实现：
			from django.core.signals import request_finished
			from django.core.signals import request_started
			from django.core.signals import got_request_exception

			from django.db.models.signals import class_prepared
			from django.db.models.signals import pre_init, post_init
			from django.db.models.signals import pre_save, post_save
			from django.db.models.signals import pre_delete, post_delete
			from django.db.models.signals import m2m_changed
			from django.db.models.signals import pre_migrate, post_migrate

			from django.test.signals import setting_changed
			from django.test.signals import template_rendered

			from django.db.backends.signals import connection_created
			
			
			def callback1(sender, **kwargs):
				print(sender,kwargs)

			pre_save.connect(callback1)
	
	
	2. 缓存
		配置：
			开发调试
			内存
			文件
			数据库
			Memcache缓存（python-memcached模块）
	
		应用：
			a. 全站缓存（基于中间件实现）
			b. 视图函数做缓存（基于装饰器）
			c. 模板局部做缓存
		
		使用：
			a. 写中间件
				MIDDLEWARE = [
					# 'django.middleware.cache.UpdateCacheMiddleware',
					'django.middleware.security.SecurityMiddleware',
					'django.contrib.sessions.middleware.SessionMiddleware',
					'django.middleware.common.CommonMiddleware',
					'django.middleware.csrf.CsrfViewMiddleware',
					'django.contrib.auth.middleware.AuthenticationMiddleware',
					'django.contrib.messages.middleware.MessageMiddleware',
					'django.middleware.clickjacking.XFrameOptionsMiddleware',
					# 'django.middleware.cache.FetchFromCacheMiddleware',
				]
			b. 装饰器
				from django.shortcuts import render,HttpResponse
				from app01 import models
				from django.views.decorators.cache import cache_page


				import time

				@cache_page(60 * 15)
				def users(request):
					ctime = str(time.time())
					return HttpResponse(ctime)
	
			c. 模板
				{% load cache %}
				<!DOCTYPE html>
				<html lang="en">
				<head>
					<meta charset="UTF-8">
					<title>Title</title>
				</head>
				<body>
					<h1>{{ ctime }}</h1>
					{% cache 5000 xxxxx %}
						{{ ctime }}
					{% endcache %}
				</body>
				</html>
					
	
	3. 权限管理 
		目标： 开发一套公共的权限组件。
		
		需求的分析：
			- 一个包含正则表达式URL是一个权限
			- 业务需求
			
		表结构设计：
			权限表：
				id      title             url  
	             1     客户列表         /users/
	             2     用户列表         /users/
	             3     用户列表         /users/
	             4     用户列表         /users/
	             5     用户列表         /users/
	             6     用户列表         /users/
	             7     用户列表         /users/
	             8     用户列表         /users/
				 
			用户表：
				id      username      password 
				 1        alex           123
				 2        eric           123
				 
			角色表：
			    id      title 
				 1       业务员
				 2       业务经理
				
			
			角色表和权限表（多对多关系）
			
			用户表和角色表（多对多）
		
		新建项目：
			创建app： rbac
			
		
		实现：
			1. 用户登录，获取当前用户的所有权限，放到session中。
			
				permission_list = user.roles.filter(permissions__id__isnull=False).values(
					'permissions__title',
					'permissions__url',
					'permissions__code',
					'permissions__group_id',
				).distinct()
			
				[
					{'permissions__title': '用户列表', 'permissions__url': '/users/', 'permissions__code': 'list', 'permissions__group_id': 1}
					{'permissions__title': '添加用户', 'permissions__url': '/users/add/', 'permissions__code': 'add', 'permissions__group_id': 1}
					{'permissions__title': '删除用户', 'permissions__url': '/users/del/(\\d+)/', 'permissions__code': 'del', 'permissions__group_id': 1}
					{'permissions__title': '修改用户', 'permissions__url': '/users/edit/(\\d+)/', 'permissions__code': 'edit', 'permissions__group_id': 1}
					{'permissions__title': '主机列表', 'permissions__url': '/hosts/', 'permissions__code': 'list', 'permissions__group_id': 2}
					{'permissions__title': '添加主机', 'permissions__url': '/hosts/add/', 'permissions__code': 'add', 'permissions__group_id': 2}
					{'permissions__title': '删除主机', 'permissions__url': '/hosts/del/(\\d+)/', 'permissions__code': 'del', 'permissions__group_id': 2}
					{'permissions__title': '修改主机', 'permissions__url': '/hosts/edit/(\\d+)/', 'permissions__code': 'edit', 'permissions__group_id': 2}
				]


				{
					1: {
						urls: [/users/,/users/add/ ,/users/del/(\d+)/],
						codes: [list,add,del]
					},
					2: {
						urls: [/hosts/,/hosts/add/ ,/hosts/del/(\d+)/],
						codes: [list,add,del]
					}
				}
							
			
			
			
				[
					/users/,
					/users/del/(\d+)/
				]
			2. 用户再次访问，获取用户当前的请求url，去session中进行比较。【基于中间件】
			
			
				request.path_info
				/users/ 
				
			3. 问题：用户菜单显示？
				- URL中不包含正则的能成为菜单
				- 菜单默认选中（删除用户，用户列表被选中）
				- 二级菜单
					菜单：
						用户权限组
							用户列表
						主机权限组
							主机列表
						主机权限组
							主机列表
						主机权限组
							主机列表
				
				实现：
					- 用户登录成功后，获取 权限+权限组+菜单 
					- 放入session的另外一个key中，用于专门做菜单
					
			
			
				
				# <a href='/users/'>用户列表</a>
				# <a href='/users/del/(\d+)/'>编辑用户</a>
				
				
			4. 问题： 页面显示时，根据权限来控制页面是否显示指定按钮。权限的粒度：按钮级别
				
				
			
			
			
			数据：
				用户表： 
					1 杨磊
					2 天了
					3 alex
					
				角色：
					1 CEO
					2 CTO
					3 销售总监
					4 销售员
					
				用户和角色关系：
					1 杨磊    1 CEO
					1 杨磊    2 CTO
					2 天了    3 销售总监
					2 天了    4 销售员
					3 alex    4 销售员
					
				
				权限表： 
					1     用户列表      /users/                 list               1
					2     添加用户      /users/add/             add                1
					3     删除用户      /users/del/(\d+)/       del                1
					4     修改用户      /users/edit/(\d+)/      edit               1

					5     主机列表      /hosts/                 list               2
					6     添加主机      /hosts/add/             add                2
					7     删除主机      /hosts/del/(\d+)/       del                2
					8     修改主机      /hosts/edit/(\d+)/      edit               2
	
				角色和权限关系：
					CEO     所有
					CTO     用户所有+主机列表 
					总监   1,2
					销售   1
	
	


作业：主机管理+应用权限
	- 请求流程，看源码【看明白】（）
	- 写作业
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		
		
		
		
		
		
		
		